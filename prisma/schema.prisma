// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// To update schema, run interminal: npx prisma db push

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(cuid()) @map("_id")
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}


// Necessary for Next auth
model Account {
    id                String @id @default(cuid()) @map("_id")
    userId            String @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleType {
    superAdmin
    manager
    client
    dietician
    kitchen
}

model Role {
    id           RoleType   @id @map("_id")
    inviteBy     RoleType[]
    order        Int?
    users        User[]
    invitesToken InviteToken[]
    dashboardGroups String[]
    dashboardItems String[]
    closeRegistration Boolean?
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    // personId    String?
    name          String?
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    changeEmailTokens ChangeEmailToken[]
    posts         Post[]
    passwordHash  String?   // @db.Text
    roleId    RoleType?
    role         Role?      @relation(fields: [roleId], references: [id])
    invitesToken       InviteToken[]
    inviterId    String?
    inviter      User?      @relation("Inviter", fields: [inviterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    invites      User[]     @relation("Inviter")
    web3Address  String?
    superAdmin  SuperAdmin?
    cateringId   String?
    catering     Catering? @relation(fields: [cateringId], references: [id])
    client      Client?
    dietician   Dietician?
    kitchen     Kitchen?
    manager    Manager?
    Clipboard       Clipboard[]
    editedFiles ClientFile[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Roles
model SuperAdmin {
    id String @id @default(cuid()) @map("_id")
    userId String @unique
    user User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

type CateringSettings {
    // lastOrderTime String @default("18:00")
    firstOrderDeadline String @default("20:00")
    secondOrderDeadline String @default("08:00")
    timeZone String @default("Europe/Warsaw")
    logoLight String?
    logoDark String?
    phone String?
    email String?
}

model Catering {
    id String @id @default(cuid()) @map("_id")
    // code Int //auto generated

    users User[]
    clients Client[]
    dieticians Dietician[]
    kitchens Kitchen[]
    managers Manager[]
    diets Diet[]
    consumers Consumer[]
    tags Tag[]
    settings CateringSettings
    name String?
    orders Order[]
    files ClientFile[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Manager {
    id String @id @default(cuid()) @map("_id")
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

type ClientSettings {
    // lastOrderTime String?
    name String?
}

type ClientInfo {
    name String?
    email String?
    phone String?
    address String?
    city String?
    zip String?
    contactPerson String?
    notes String?
    country String?
    code String?
}

model Client {
    id String @id @default(cuid()) @map("_id")
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])
    settings ClientSettings //editable by catering
    info ClientInfo //editable by catering
    name String? //editable by client
    consumers Consumer[]
    orders Order[]
    tags TagClient[]
    files ClientFile[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TagType {
    client
    all
}

model Tag {
    id String @id @default(cuid()) @map("_id")
    name String @unique
    clients TagClient[]
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])
    type TagType
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TagClient {
    id String @id @default(cuid()) @map("_id")
    tagId String
    tag Tag @relation(fields: [tagId], references: [id])
    clientId String
    client Client @relation(fields: [clientId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Dietician {
    id String @id @default(cuid()) @map("_id")
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])
    name String?
    consumers Consumer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Kitchen {
    id String @id @default(cuid()) @map("_id")
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])
    name String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

type Diet {
    code String?
    description String?
}

model Consumer {
    id String @id @default(cuid()) @map("_id")
    code String? //editable by dietician
    clientId String
    client Client @relation(fields: [clientId], references: [id])
    name String?
    notes String?

    dieticianId String
    dietician Dietician @relation(fields: [dieticianId], references: [id])

    diet Diet?

    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])

    breakfastOrders OrderConsumerBreakfast[]
    lunchOrders OrderConsumerLunch[]
    dinnerOrders OrderConsumerDinner[]

    lunchOrdersBeforeDeadline OrderConsumerLunchBeforeDeadline[]
    dinnerOrdersBeforeDeadline OrderConsumerDinnerBeforeDeadline[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Diet {
//     id String @id @default(cuid()) @map("_id")
//     code Int //auto generated
//     dieticianId String
//     dietician Dietician @relation(fields: [dieticianId], references: [id])
//     consumers Consumer[] // Zmieniono na relacjÄ™ jeden-do-wielu
//     cateringId String
//     catering Catering @relation(fields: [cateringId], references: [id])
//     notes String?
//     description String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }



model ActivationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ChangeEmailToken {
    id         String   @id @default(cuid()) @map("_id")
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    newEmail   String
    token      String   @unique
    expires    DateTime

    @@unique([userId, token])
}

model ResetPasswordToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model InviteToken {
    id         String   @id @default(cuid()) @map("_id")
    token      String
    email      String?
    inviterId  String
    inviter    User?     @relation(fields: [inviterId], references: [id])
    expires    DateTime
    roleId   RoleType
    role       Role     @relation(fields: [roleId], references: [id])

    @@unique([token])
}

model Sitemap {
    id         String   @id @default(cuid()) @map("_id")
    priority   Float
    hasChildren Boolean
    identifier String
    url        String

    @@unique([identifier])
}
model MainMenu {
    id         String   @id @default(cuid()) @map("_id")
    order   Int
    hasChildren Boolean
    identifier String
    url        String
    isPage Boolean
    loginRequired Boolean

    @@unique([identifier])
}

enum SettingType {
    STRING
    NUMBER
    OBJECT
    NULL
    BOOLEAN
    STRING_ARRAY
    NUMBER_ARRAY
}
enum SettingAccessType {
    PUBLIC
    PRIVATE
}
model Setting {
    id         String   @id @default(cuid()) @map("_id")
    access   SettingAccessType
    group   String
    name String
    type   SettingType
    value  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([group, name])
}

model Translation {
    id         String   @id @default(cuid()) @map("_id")
    group   String
    name String
    lang String
    value  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([group, name, lang])
}

model Article {
    id        String   @id @default(cuid()) @map("_id")
    anchor String
    title String
    h1 String
    description String
    slug      String
    lead      String
    content    String[]
    context    Json?
    lang    String
    author    String
    date    DateTime
    key   String
    group   String
    categories String[]
    tags String[]
    fake Boolean?
    coverImage    String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([title, slug, lang, author, date])
}

model Page {
    id        String   @id @default(cuid()) @map("_id")
    anchor String
    title String
    h1 String
    description String
    content    String[]
    context    Json?
    lang    String
    key   String
    fake Boolean?
    // customData    Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([key, lang])
}

model MdContent {
    id        String   @id @default(cuid()) @map("_id")
    content    String[]
    context    Json?
    lang    String
    key   String
    fake Boolean?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([key, lang])
}

model EmailTemplate {
    id         String   @id @default(cuid()) @map("_id")
    content    String[]
    text       String
    subject    String
    senderEmail String?
    senderAlias String?
    context    Json?
    lang   String
    key        String
    fake       Boolean?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([key, lang])
}

enum ClipboardKey {
    clients_columns
    consumers_columns
    orders_columns
}

model Clipboard {
    id         String   @id @default(cuid()) @map("_id")
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    key        ClipboardKey
    value      Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, key])

}

enum OrderStatus {
    draft
    in_progress
    completed
}

type DeliveryDay {
    year Int
    month Int // 0-11
    day Int
}

model Order {
    id         String   @id @default(cuid()) @map("_id")
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])
    clientId String
    client Client @relation(fields: [clientId], references: [id])
    status OrderStatus

    breakfastStandard Int
    lunchStandard Int
    dinnerStandard Int

    breakfastDietCount Int
    lunchDietCount Int
    dinnerDietCount Int

    breakfastDiet OrderConsumerBreakfast[]
    lunchDiet OrderConsumerLunch[]
    dinnerDiet OrderConsumerDinner[]

    lunchStandardBeforeDeadline Int
    dinnerStandardBeforeDeadline Int

    lunchDietBeforeDeadline OrderConsumerLunchBeforeDeadline[]
    dinnerDietBeforeDeadline OrderConsumerDinnerBeforeDeadline[]

    lunchDietCountBeforeDeadline Int
    dinnerDietCountBeforeDeadline Int

    deliveryDay DeliveryDay

    sentToCateringAt DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([deliveryDay.year])
    @@index([deliveryDay.month])
    @@index([deliveryDay.day])
}

model OrderConsumerBreakfast {
    id         String   @id @default(cuid()) @map("_id")
    orderId    String
    order      Order    @relation(fields: [orderId], references: [id])
    consumerId String
    consumer   Consumer @relation(fields: [consumerId], references: [id])

    @@unique([orderId, consumerId])
}

model OrderConsumerLunch {
    id         String   @id @default(cuid()) @map("_id")
    orderId    String
    order      Order    @relation(fields: [orderId], references: [id])
    consumerId String
    consumer   Consumer @relation(fields: [consumerId], references: [id])

    @@unique([orderId, consumerId])
}

model OrderConsumerDinner {
    id         String   @id @default(cuid()) @map("_id")
    orderId    String
    order      Order    @relation(fields: [orderId], references: [id])
    consumerId String
    consumer   Consumer @relation(fields: [consumerId], references: [id])

    @@unique([orderId, consumerId])
}

model OrderConsumerLunchBeforeDeadline {
    id         String   @id @default(cuid()) @map("_id")
    orderId    String
    order      Order    @relation(fields: [orderId], references: [id])
    consumerId String
    consumer   Consumer @relation(fields: [consumerId], references: [id])

    @@unique([orderId, consumerId])
}

model OrderConsumerDinnerBeforeDeadline {
    id         String   @id @default(cuid()) @map("_id")
    orderId    String
    order      Order    @relation(fields: [orderId], references: [id])
    consumerId String
    consumer   Consumer @relation(fields: [consumerId], references: [id])

    @@unique([orderId, consumerId])
}

enum ClientFileType {
    menu
    checklist
    diets
}

type ClientFileWeek {
    year Int
    week Int
}

model ClientFile {
    id String @id @default(cuid()) @map("_id")
    clientId String
    client Client @relation(fields: [clientId], references: [id])
    // dieticianId String
    // dietician Dietician @relation(fields: [dieticianId], references: [id])
    cateringId String
    catering Catering @relation(fields: [cateringId], references: [id])
    fileType ClientFileType
    s3Key String
    week ClientFileWeek
    fileName String
    
    editedById String?
    editedBy User? @relation(fields: [editedById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}