name: Update Repository

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
      stage:
        description: 'Environment stage'
        required: true
        type: choice
        options:
          - test
          - demo
          - prod
        default: 'test'
      should_rebuild:
        description: 'Should rebuild?'
        required: true
        type: choice
        options:
          - "yes"
          - "no"
        default: "yes"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/serp_sim_key
        chmod 600 ~/.ssh/serp_sim_key
        ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    - name: Configure Git
      run: |
        git config --global user.email "dziewanowski@gmail.com"
        git config --global user.name "Jacaplaca"
        git remote set-url origin https://Jacaplaca:${{ secrets.GIT_REPO_TOKEN }}@github.com/Jacaplaca/serp-sim
        git remote -v

    - name: Prepare environment
      run: |
        echo "Selected stage: ${{ github.event.inputs.stage }}"
        ssh -i ~/.ssh/serp_sim_key ${{ secrets.USER }}@${{ secrets.HOST }} '
          cd ~/sources/serp-sim
          BRANCH=${{ github.event.inputs.branch }}
          STAGE=${{ github.event.inputs.stage }}
          BASE_NAME=$BRANCH-$STAGE
          ENV_FILE=".env.${BASE_NAME}"
          TARGET_DIR="t3_$BASE_NAME"

          if [ ! -d "$TARGET_DIR" ]; then
            mkdir "$TARGET_DIR"
          fi

          if [ ! -f "$TARGET_DIR/.env" ]; then
            if [ -f "$ENV_FILE" ]; then
              cp "$ENV_FILE" "$TARGET_DIR/.env"
            else
              cp .env "$TARGET_DIR/.env"
            fi
          fi

          if [ ! -d "$TARGET_DIR/public" ]; then
            mkdir "$TARGET_DIR/public"
          fi

          if [ ! -d "$TARGET_DIR/public/fontawesome" ]; then
            tar -xf fontawesome.tar -C "$TARGET_DIR/public"
          fi

          # Diagnostic step: List contents of target directory
          ls -la "$TARGET_DIR"
        '

    - name: Pull latest changes
      run: |
        ssh -i ~/.ssh/serp_sim_key ${{ secrets.USER }}@${{ secrets.HOST }} '
        BRANCH=${{ github.event.inputs.branch }}
        STAGE=${{ github.event.inputs.stage }}
        BASE_NAME=$BRANCH-$STAGE
        echo "Deploying branch: $BRANCH"
        cd ~/sources/serp-sim/t3_$BASE_NAME
        git config --global user.email "dziewanowski@gmail.com"
        git config --global user.name "Jacaplaca"
        git remote set-url origin https://Jacaplaca:${{ secrets.GIT_REPO_TOKEN }}@github.com/Jacaplaca/serp-sim
        git remote -v
        if [ ! -d ".git" ]; then
          git init
          git remote add origin https://Jacaplaca:${{ secrets.GIT_REPO_TOKEN }}@github.com/Jacaplaca/serp-sim
        fi
        sudo git fetch origin
        sudo git reset --hard origin/$BRANCH
        '

    - name: Check Database Status
      run: |
        ssh -i ~/.ssh/serp_sim_key ${{ secrets.USER }}@${{ secrets.HOST }} '
          BRANCH=${{ github.event.inputs.branch }}
          STAGE=${{ github.event.inputs.stage }}
          BASE_NAME=$BRANCH-$STAGE
          cd ~/sources/serp-sim/t3_$BASE_NAME
          
          # Extract DATABASE_URL and remove quotes
          DATABASE_URL=$(grep "^DATABASE_URL=" .env | cut -d "=" -f2- | tr -d "\"")
          echo "Extracted DATABASE_URL (masked):"
          echo "$DATABASE_URL" | sed "s/:[^@]*@/:*****@/"
          
          echo "Attempting database connection..."
          
          RESULT=$(docker exec mongodb mongosh "$DATABASE_URL" --eval "
            const settingsCount = db.Setting.countDocuments();
            if (settingsCount > 0) {
              print(\"DATABASE_STATUS=initialized\");
              // Dodanie aktualizacji rekordu
              db.Setting.updateOne(
                { group: \"app\", name: \"active\" },
                { \$set: { value: \"false\" } }
              );
              print(\"Setting updated successfully\");
            } else {
              print(\"DATABASE_STATUS=empty\");
            }
          ")
          
          echo "MongoDB command result:"
          echo "$RESULT"
          
          if echo "$RESULT" | grep -q "DATABASE_STATUS=initialized"; then
            echo "✅ Database is initialized (records found in Settings collection)"
          else
            echo "❌ Database is empty or not initialized (no records in Settings collection)"
          fi
        '

    - name: Build Docker images
      if: ${{ github.event.inputs.should_rebuild == 'yes' }}
      run: |
        ssh -i ~/.ssh/serp_sim_key ${{ secrets.USER }}@${{ secrets.HOST }} '
          BRANCH=${{ github.event.inputs.branch }}
          STAGE=${{ github.event.inputs.stage }}
          BASE_NAME=$BRANCH-$STAGE
          cd ~/sources/serp-sim/t3_$BASE_NAME
          sudo docker compose --env-file .env -f ./deployment/docker-compose.yml build
        '

    - name: Restart Docker containers
      if: ${{ github.event.inputs.should_rebuild == 'yes' }}
      run: |
        ssh -i ~/.ssh/serp_sim_key ${{ secrets.USER }}@${{ secrets.HOST }} '
          BRANCH=${{ github.event.inputs.branch }}
          STAGE=${{ github.event.inputs.stage }}
          BASE_NAME=$BRANCH-$STAGE
          cd ~/sources/serp-sim/t3_$BASE_NAME
          sudo docker compose --env-file .env -f ./deployment/docker-compose.yml -p t3_$BASE_NAME up -d
        '




