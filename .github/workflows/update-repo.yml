name: Update Repository

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Environment stage'
        required: true
        type: choice
        options:
          - test
          - demo
          - prod
        default: 'test'
      should_rebuild:
        description: 'Should rebuild?'
        required: true
        type: choice
        options:
          - "yes"
          - "no"
        default: "yes"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/catering_key
        chmod 600 ~/.ssh/catering_key
        ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    - name: Configure Git
      run: |
        git config --global user.email "dziewanowski@gmail.com"
        git config --global user.name "Jacaplaca"
        git remote set-url origin https://Jacaplaca:${{ secrets.GIT_REPO_TOKEN }}@github.com/Jacaplaca/catering

    - name: Prepare environment
      run: |
        ssh -i ~/.ssh/catering_key ${{ secrets.USER }}@${{ secrets.HOST }} '
          cd ~/sources/catering
          STAGE=${{ github.event.inputs.stage }}
          TARGET_DIR="catering_$STAGE"
          ENV_FILE=".env.${STAGE}"

          if [ ! -d "$TARGET_DIR" ]; then
            mkdir "$TARGET_DIR"
          fi

          if [ ! -f "$TARGET_DIR/.env" ]; then
            if [ -f "$ENV_FILE" ]; then
              cp "$ENV_FILE" "$TARGET_DIR/.env"
            else
              cp .env "$TARGET_DIR/.env"
            fi
          fi

          if [ ! -d "$TARGET_DIR/public" ]; then
            mkdir "$TARGET_DIR/public"
          fi

          if [ ! -d "$TARGET_DIR/public/fontawesome" ]; then
            tar -xf fontawesome.tar -C "$TARGET_DIR/public"
          fi

          ls -la "$TARGET_DIR"
        '

    - name: Pull latest changes
      run: |
        ssh -i ~/.ssh/catering_key ${{ secrets.USER }}@${{ secrets.HOST }} '
          STAGE=${{ github.event.inputs.stage }}
          cd ~/sources/catering/catering_$STAGE
          git config --global user.email "dziewanowski@gmail.com"
          git config --global user.name "Jacaplaca"
          git remote set-url origin https://Jacaplaca:${{ secrets.GIT_REPO_TOKEN }}@github.com/Jacaplaca/catering
          
          if [ ! -d ".git" ]; then
            git init
            git remote add origin https://Jacaplaca:${{ secrets.GIT_REPO_TOKEN }}@github.com/Jacaplaca/catering
          fi
          sudo git fetch origin
          sudo git reset --hard origin/main
        '

    # - name: Check Database Status
    #   run: |
    #     ssh -i ~/.ssh/catering_key ${{ secrets.USER }}@${{ secrets.HOST }} '
    #       STAGE=${{ github.event.inputs.stage }}
    #       cd ~/sources/catering/catering_$STAGE
          
    #       DATABASE_URL=$(grep "^DATABASE_URL=" .env | cut -d "=" -f2- | tr -d "\"")
    #       echo "Extracted DATABASE_URL (masked):"
    #       echo "$DATABASE_URL" | sed "s/:[^@]*@/:*****@/"
          
    #       echo "Attempting database connection..."
          
    #       RESULT=$(docker exec mongodb mongosh "$DATABASE_URL" --eval "
    #         const settingsCount = db.Setting.countDocuments();
    #         if (settingsCount > 0) {
    #           print(\"DATABASE_STATUS=initialized\");
    #           db.Setting.updateOne(
    #             { group: \"app\", name: \"active\" },
    #             { \$set: { value: \"false\" } }
    #           );
    #           print(\"Setting updated successfully\");
    #         } else {
    #           print(\"DATABASE_STATUS=empty\");
    #         }
    #       ")
          
    #       echo "MongoDB command result:"
    #       echo "$RESULT"
          
    #       if echo "$RESULT" | grep -q "DATABASE_STATUS=initialized"; then
    #         echo "✅ Database is initialized"
    #       else
    #         echo "❌ Database is empty or not initialized"
    #       fi
    #     '

    # - name: Build Docker images
    #   if: ${{ github.event.inputs.should_rebuild == 'yes' }}
    #   run: |
    #     ssh -i ~/.ssh/catering_key ${{ secrets.USER }}@${{ secrets.HOST }} '
    #       STAGE=${{ github.event.inputs.stage }}
    #       cd ~/sources/catering/catering_$STAGE
    #       sudo docker compose --env-file .env -f ./deployment/docker-compose.yml build
    #     '

    # - name: Restart Docker containers
    #   if: ${{ github.event.inputs.should_rebuild == 'yes' }}
    #   run: |
    #     ssh -i ~/.ssh/catering_key ${{ secrets.USER }}@${{ secrets.HOST }} '
    #       STAGE=${{ github.event.inputs.stage }}
    #       cd ~/sources/catering/catering_$STAGE
    #       sudo docker compose --env-file .env -f ./deployment/docker-compose.yml -p catering_$STAGE up -d
    #     '




