name: Version Bump

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GIT_REPO_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Configure Git
      run: |
        git config --global user.email "dziewanowski@gmail.com"
        git config --global user.name "Jacaplaca"

    # Can be needed in the future for tasks requiring dependencies (e.g. tests)
    # - name: Install dependencies
    #   run: npm ci
      
    - name: Check if version bump needed
      id: check
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ $COMMIT_MSG == *"[skip ci]"* ]] || [[ $COMMIT_MSG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ $COMMIT_MSG == "Bump version"* ]]; then
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Bump version
      if: steps.check.outputs.skip != 'true'
      run: |
        # Get commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Determine version bump type based on commit message
        if [[ $COMMIT_MSG == *"#major"* ]]; then
          BUMP_TYPE="major"
        elif [[ $COMMIT_MSG == *"#minor"* ]]; then
          BUMP_TYPE="minor"
        else
          BUMP_TYPE="patch"
        fi
        
        # Calculate new version
        NEW_VERSION=$(node -e "
          try {
            const currentVersion = '${CURRENT_VERSION}';
            const [major, minor, patch] = currentVersion.split('.');
            let newVersion;
            switch('${BUMP_TYPE}') {
              case 'major':
                newVersion = \`\${parseInt(major) + 1}.0.0\`;
                break;
              case 'minor':
                newVersion = \`\${major}.\${parseInt(minor) + 1}.0\`;
                break;
              default:
                newVersion = \`\${major}.\${minor}.\${parseInt(patch) + 1}\`;
            }
            console.log(newVersion);
          } catch (error) {
            console.error('Error calculating version:', error);
            process.exit(1);
          }
        ")
        
        # Update package.json with new version
        npm version "${NEW_VERSION}" --no-git-tag-version
        
        git add package.json
        git commit -m "Bump version to ${NEW_VERSION} [skip ci]"
        
        # Add logging
        echo "Creating new version tag: v${NEW_VERSION}"
        git tag "v${NEW_VERSION}"
        echo "Pushing changes and tags to remote..."
        git push origin main --follow-tags || {
          echo "Push failed. Retrying with rebase..."
          git pull --rebase
          git push origin main --follow-tags
        }
        echo "Verifying tags..."
        git tag -l "v${NEW_VERSION}"